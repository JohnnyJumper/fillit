/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jtahirov <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/10/02 20:26:17 by jtahirov          #+#    #+#             */
/*   Updated: 2017/10/07 20:17:34 by ynenakho         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fillit.h"
#include <fcntl.h>

int	main(int argc, char **argv)
{
	t_list	*list;
	int		fd;

	if (argc != 2)
	{
		ft_putstr("usage: fillit [map_file]\n");
		return (1);
	}
	if (!(fd = open(argv[1], O_RDONLY)))
	{
		ft_putstr("error\n");
		return (2);
	}
	if (!(list = open_file(fd)))
	{
		ft_putstr("error\n");
		return (3);
	}
	print_map(solve(list));
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   map.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ynenakho <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/10/07 14:27:37 by ynenakho          #+#    #+#             */
/*   Updated: 2017/10/08 17:08:54 by jtahirov         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fillit.h"

int		sq_rt(int i)
{
	int sqr_size;

	sqr_size = 2;
	while ((sqr_size * sqr_size) < i)
		sqr_size++;
	return (sqr_size);
}

t_map	*alloc_map(int size)
{
	t_map	*map;
	int		i;
	int		j;

	map = (t_map *)ft_memalloc(sizeof(t_map));
	map->size = size;
	map->array = (char **)ft_memalloc(sizeof(char *) * size);
	i = 0;
	while (i < size)
	{
		map->array[i] = ft_strnew(size);
		j = 0;
		while (j < size)
		{
			map->array[i][j] = '.';
			j++;
		}
		i++;
	}
	return (map);
}

void	print_map(t_map *map)
{
	int i;

	i = 0;
	while (i < map->size)
	{
		ft_putstr(map->array[i]);
		ft_putchar('\n');
		i++;
	}
}

void	free_map(t_map *map)
{
	int i;

	i = 0;
	while (i < map->size)
	{
		ft_memdel((void **)&(map->array[i]));
		i++;
	}
	ft_memdel((void **)&(map->array));
	ft_memdel((void **)&map);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   open_file.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ynenakho <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/10/03 16:25:57 by ynenakho          #+#    #+#             */
/*   Updated: 2017/10/07 20:13:47 by ynenakho         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fillit.h"

t_list	*open_file(int fd)
{
	char	*buf;
	int		ret;
	t_list	*list;
	char	bukva;
	int		flag;

	list = NULL;
	bukva = 'A';
	buf = ft_strnew(21);
	flag = 0;
	while ((ret = read(fd, buf, 21)) >= 20)
	{
		if (check_map(buf, &flag))
			return (NULL);
		ft_lstpush(&list, ft_lstnew((void *)identify_shape(buf, bukva++),
					sizeof(t_shape)));
		ft_bzero(buf, 21);
	}
	if (ret != 0 || flag != 1)
		return (NULL);
	return (list);
}

int		check_check(int hash_counter, int dot_counter, \
		int line_counter, int *flag)
{
	if (hash_counter != 4)
		return (1);
	if (dot_counter != 12)
		return (1);
	if (line_counter == 4)
	{
		if (*flag != 1)
			*flag = 1;
		return (0);
	}
	if (line_counter != 5)
		return (1);
	return (0);
}

int		check_map(char *buf, int *flag)
{
	int	hash_counter;
	int dot_counter;
	int	line_counter;
	int counter;

	counter = 0;
	hash_counter = 0;
	dot_counter = 0;
	line_counter = 0;
	while (counter < 21)
	{
		if (buf[counter] == '#')
			hash_counter++;
		if (buf[counter] == '.')
			dot_counter++;
		if (buf[counter] == '\n')
			line_counter++;
		counter++;
	}
	if (check_check(hash_counter, dot_counter, line_counter, flag))
		return (1);
	if (check_connection(buf) || check_place(buf))
		return (1);
	return (0);
}

int		check_connection(char *buf)
{
	int connect;
	int i;

	i = 0;
	connect = 0;
	while (i < 20)
	{
		if (buf[i] == '#')
		{
			if (buf[i + 1] == '#' && (i + 1) < 20)
				connect++;
			if (buf[i - 1] == '#' && (i - 1) >= 0)
				connect++;
			if (buf[i + 5] == '#' && (i + 5) < 20)
				connect++;
			if (buf[i - 5] == '#' && (i - 5) >= 0)
				connect++;
		}
		i++;
	}
	if (connect == 6 || connect == 8)
		return (0);
	return (1);
}

int		check_place(char *buf)
{
	int i;

	i = 0;
	while (i < 20)
	{
		if ((i % 5) < 4)
		{
			if (buf[i] != '#' && buf[i] != '.')
				return (1);
		}
		else if (buf[i] != '\n')
			return (1);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   solve.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jtahirov <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/10/05 22:30:26 by jtahirov          #+#    #+#             */
/*   Updated: 2017/10/07 20:16:38 by ynenakho         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fillit.h"

int		solve_map(t_map *map, t_list *list)
{
	int			x;
	int			y;
	t_shape		*shape;

	if (!list)
		return (1);
	y = 0;
	shape = (t_shape *)list->content;
	while (y < map->size - shape->height + 1)
	{
		x = 0;
		while (x < map->size - shape->width + 1)
		{
			if (place(map, shape, x, y))
			{
				if (solve_map(map, list->next))
					return (1);
				else
					put(map, shape, coord_new(x, y), '.');
			}
			x++;
		}
		y++;
	}
	return (0);
}

t_map	*solve(t_list *list)
{
	t_map	*map;
	int		size;

	size = sq_rt(ft_lstcount(list) * 4);
	map = alloc_map(size);
	while (!solve_map(map, list))
	{
		size++;
		free_map(map);
		map = alloc_map(size);
	}
	return (map);
}

int		place(t_map *map, t_shape *shape, int x, int y)
{
	int row;
	int col;

	row = 0;
	while (row < shape->width)
	{
		col = 0;
		while (col < shape->height)
		{
			if (shape->shape[col][row] == '#' \
					&& map->array[col + y][row + x] != '.')
				return (0);
			col++;
		}
		row++;
	}
	put(map, shape, coord_new(x, y), shape->bukva);
	return (1);
}

void	put(t_map *map, t_shape *shape, t_coord *coord, char bukva)
{
	int x;
	int y;

	x = 0;
	while (x < shape->width)
	{
		y = 0;
		while (y < shape->height)
		{
			if (shape->shape[y][x] == '#')
				map->array[coord->y + y][coord->x + x] = bukva;
			y++;
		}
		x++;
	}
	ft_memdel((void **)&coord);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tetri_shape.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jtahirov <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/10/02 18:40:56 by jtahirov          #+#    #+#             */
/*   Updated: 2017/10/07 13:59:57 by jtahirov         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fillit.h"
#include <stdlib.h>

t_coord		*coord_new(int x, int y)
{
	t_coord	*new;

	new = (t_coord *)ft_memalloc(sizeof(t_coord));
	new->x = x;
	new->y = y;
	return (new);
}

void		min_max(char *buf, t_coord *min, t_coord *max)
{
	int		counter;

	counter = 0;
	while (counter < 20)
	{
		if (buf[counter] == '#')
		{
			if ((counter / 5) < min->y)
				min->y = counter / 5;
			if ((counter / 5) > max->y)
				max->y = counter / 5;
			if ((counter % 5) < min->x)
				min->x = counter % 5;
			if ((counter % 5) > max->x)
				max->x = counter % 5;
		}
		counter++;
	}
}

t_shape		*shape_new(char **shape, int width, int height, char bukva)
{
	t_shape *new;

	new = (t_shape *)ft_memalloc(sizeof(t_shape));
	new->shape = shape;
	new->width = width;
	new->height = height;
	new->bukva = bukva;
	return (new);
}

t_shape		*identify_shape(char *buf, char bukva)
{
	t_coord		*min;
	t_coord		*max;
	char		**shape;
	t_shape		*myshape;
	int			counter;

	min = coord_new(3, 3);
	max = coord_new(0, 0);
	min_max(buf, min, max);
	shape = (char **)ft_memalloc(sizeof(char *) * ((max->y - min->y) + 2));
	counter = 0;
	while (counter < (max->y - min->y + 1))
	{
		*shape = ft_strnew(max->x - min->x + 1);
		ft_strncpy(*shape, (buf + (min->x) + (counter + min->y) * 5),
				(max->x - min->x + 1));
		counter++;
		shape++;
	}
	*shape = NULL;
	shape -= counter;
	myshape = shape_new(shape, max->x - min->x + 1, max->y - min->y + 1, bukva);
	ft_memdel((void**)&min);
	ft_memdel((void**)&max);
	return (myshape);
}
